name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: MinSizeRel

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [windows-latest]
        platform: [x64, win32]

    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Cache Build
      id: cache-build
      uses: actions/cache@v2
      with:
        path: build
        key: ${{matrix.os}}-${{matrix.platform}}

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -A ${{matrix.platform}}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: lpvpn-${{runner.os}}-${{matrix.platform}}
        path: |
          build/${{env.BUILD_TYPE}}/lpvpn.exe
          build/${{env.BUILD_TYPE}}/discord_game_sdk.dll
          build/${{env.BUILD_TYPE}}/wintun.dll
          build/${{env.BUILD_TYPE}}/LICENSE

    - name: Upload Artifact (Standalone)
      uses: actions/upload-artifact@v2
      with:
        name: lpvpn-standalone-${{runner.os}}-${{matrix.platform}}
        path: |
          build/${{env.BUILD_TYPE}}/lpvpn-standalone.exe
          build/${{env.BUILD_TYPE}}/LICENSE

    - name: Make ZIP
      shell: bash
      working-directory: ${{github.workspace}}/build/${{env.BUILD_TYPE}}
      run: zip lpvpn.zip lpvpn.exe discord_game_sdk.dll wintun.dll LICENSE

    - name: Get Release Upload URL
      if: github.event_name == 'release'
      id: get_release
      uses: bruceadams/get-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{github.token}}
        
    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{github.token}}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: build/${{env.BUILD_TYPE}}/lpvpn-standalone.exe
        asset_name: lpvpn-standalone-${{matrix.platform}}.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    - name: Upload Release Asset (Standalone)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{github.token}}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: build/${{env.BUILD_TYPE}}/lpvpn-standalone.exe
        asset_name: lpvpn-standalone-${{matrix.platform}}.exe
        asset_content_type: application/vnd.microsoft.portable-executable
